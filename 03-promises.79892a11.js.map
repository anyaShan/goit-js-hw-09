{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SASA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KAjBM,CACXQ,OAAQC,SAASC,cAAc,SAC/BC,YAAaF,SAASC,cAAc,2BAGjCF,OAAOI,iBAAiB,UAgB7B,SAAsBC,GACpBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALf,MAAOmB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGvBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAASF,OAAOH,EAAKI,OACrBE,EAAWH,OAAOF,EAAOG,OAE7B,GAAIF,EAAa,GAAKG,EAAS,GAAKC,EAAW,EAE7C,YADAC,MAAM,iCAIRC,QAAQC,IAAIP,EAAYG,EAAQC,GAEhC,IAAK,IAAII,EAAW,EAAGA,GAAYJ,EAAUI,GAAY,EACvD/B,EAAc+B,EAAUR,GACrBS,MAAK,SAAAC,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MACjBgC,EAAApC,GAASqC,OAAOC,QACd,uBAAwCC,OAAfpC,EAAS,QAAYoC,OAANnC,EAAM,M,IAGjDoC,OAAM,SAAAL,G,IAAGhC,EAAQgC,EAARhC,SAAUC,EAAK+B,EAAL/B,MAClBgC,EAAApC,GAASqC,OAAOI,QACd,sBAAuCF,OAAfpC,EAAS,QAAYoC,OAANnC,EAAM,M,IAGnDqB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  submitBtnEl: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let firstDelay = Number(delay.value);\n  let stepEl = Number(step.value);\n  let amountEl = Number(amount.value);\n\n  if (firstDelay < 0 || stepEl < 0 || amountEl < 0) {\n    alert('Enter a number greater than 0');\n    return;\n  }\n\n  console.log(firstDelay, stepEl, amountEl);\n\n  for (let position = 1; position <= amountEl; position += 1) {\n    createPromise(position, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    firstDelay += stepEl;\n  }\n}\n\n// =================================VERSION 2==================================================\n// const refs = {\n//   formEl: document.querySelector('.form'),\n//   submitBtnEl: document.querySelector('button[type=\"submit\"]'),\n// };\n\n// const body = document.body;\n// body.classList = 'container';\n\n// refs.formEl.addEventListener('submit', onFormSubmit);\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// creatListOfPromises();\n\n// function onFormSubmit(event) {\n//   event.preventDefault();\n//   const {\n//     elements: { delay, step, amount },\n//   } = event.currentTarget;\n\n//   let firstDelay = Number(delay.value);\n//   let stepEl = Number(step.value);\n//   let amountEl = Number(amount.value);\n\n//   if (firstDelay < 0 || stepEl < 0 || amountEl < 0) {\n//     alert('Enter a number greater than 0');\n//     return;\n//   }\n\n//   console.log(firstDelay, stepEl, amountEl);\n\n//   cleanListOfPromises();\n\n//   for (let position = 1; position <= amountEl; position += 1) {\n//     createPromise(position, firstDelay)\n//       .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         fulfilled({ position, delay });\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//         rejected({ position, delay });\n//       });\n//     firstDelay += stepEl;\n//   }\n// }\n\n// function creatListOfPromises() {\n//   const listOfPromises = document.createElement('ul');\n//   listOfPromises.classList = 'promises-list';\n//   refs.formEl.after(listOfPromises);\n//   return (refs.listOfPromises = document.querySelector('.promises-list'));\n// }\n\n// function cleanListOfPromises() {\n//   return (refs.listOfPromises.innerHTML = '');\n// }\n\n// function fulfilled({ position, delay }) {\n//   const string = `<li class=\"promises-item fulfilled-text\">✅ Fulfilled promise ${position} in ${delay}ms</li>`;\n//   refs.listOfPromises.insertAdjacentHTML('beforeend', string);\n// }\n\n// function rejected({ position, delay }) {\n//   const string = `<li class=\"promises-item rejected-text\">❌ Rejected promise ${position} in ${delay}ms</li>`;\n//   refs.listOfPromises.insertAdjacentHTML('beforeend', string);\n// }\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","formEl","document","querySelector","submitBtnEl","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","firstDelay","Number","value","stepEl","amountEl","alert","console","log","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.79892a11.js.map"}